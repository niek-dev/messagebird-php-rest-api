<?php

namespace MessageBird\Objects\Conversation;

use JsonSerializable;
use MessageBird\Objects\Base;

/**
 * Messages that have been sent by, or received from, a customer are
 * automatically threaded in a conversation. Any messages sent through the API
 * or received from your customer across any of your configured channels can be
 * retrieved via the messages resource. Messages are returned from the API in
 * the order they were created, with newest messages returned first.
 */
class Message extends Base implements JsonSerializable
{
    /**
     * A unique ID generated by the MessageBird platform that identifies this
     * message.
     *
     * @var string
     */
    public string $id;

    /**
     * The unique ID that identifies the conversation that this message is a
     * part of.
     *
     * @var string
     */
    public string $conversationId;

    /**
     * The unique ID that identifies the channel that the message is sent or
     * received on.
     *
     * @var string
     */
    public string $channelId;

    /**
     * The direction of the message. Either 'sent' (mobile-terminated) for
     * outbound messages sent through the API or 'received' (mobile-originated)
     * for inbound messages from the contact.
     *
     * @var string
     */
    public string $direction;

    /**
     * The status of the message. Possible values: "pending", "received",
     * "sent", "delivered", "read", "unsupported", "failed" and
     * "pending_media".
     *
     * @var string
     */
    public string $status;

    /**
     * Type of this message's content. Possible values: "text", "image",
     * "audio", "video", "file", "location".
     *
     * @var string
     */
    public string $type;

    /**
     * Content of the message. Implementation dependent on this message's type.
     *
     * @var MessageContent
     */
    public MessageContent $content;

    /**
     * Identifier for the receiver. For example the phone number (MSISDN) for
     * SMS-based channels.
     *
     * @var string
     */
    public string $to;

    /**
     * The unique ID that identifies the message sender. The value depends on platform.
     *
     * @var string
     */
    public string $from;

    /**
     * A JSON-formatted object that can be used to identify the source of the message.
     *
     * @var array
     */
    public array $source;

    /**
     * The date and time when this message was first created in RFC3339 format.
     *
     * @var string
     */
    public string $createdDatetime;

    /**
     * The date and time when this message was most recently updated in
     * RFC3339 format.
     *
     * @var string
     */
    public string $updatedDatetime;

    /**
     * @inheritDoc
     * @param $object
     * @return $this
     */
    public function loadFromArray($object): Message
    {
        parent::loadFromArray($object);

        if (!empty($object->content)) {
            $content = new MessageContent();
            $content->loadFromArray($object->content);
            $this->content = $content;
        }

        if (!empty($object->source)) {
            $this->source = json_decode(json_encode($object->source), true);
        }

        return $this;
    }

    /**
     * @inheritDoc
     * @param $object
     * @return $this
     */
    public function loadFromStdclass($object): self
    {
        parent::loadFromStdclass($object);

        if (!empty($object->content)) {
            $content = new MessageContent();
            $content->loadFromStdclass($object->content);
            $this->content = $content;
        }

        if (!empty($object->source)) {
            $this->source = json_decode(json_encode($object->source), true);
        }

        return $this;
    }

    /**
     * @return array
     */
    public function jsonSerialize(): array
    {
        $json = [];

        foreach (get_object_vars($this) as $key => $value) {
            if (!empty($value)) {
                $json[$key] = $value;
            }
        }

        return $json;
    }
}
